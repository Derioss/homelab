---
- name: test kubeconfig path
  ansible.builtin.stat:
    path: ~/.kube/config
  register: kubeconfig_path

- name: replace host ip address in the kubeconfig
  ansible.builtin.replace:
    path: ~/.kube/config
    regexp: "https://127.0.0.1:6443"
    replace: "https://{{ k3s_master_ip }}:6443"
  when: kubeconfig_path and k3s_copy_kubeconfig

- name: Change k3s.yaml permissions to 644
  ansible.builtin.file:
    path: ~/.kube/config
    mode: '0600'

- name: check if helm is installed /usr/local/bin/helm
  ansible.builtin.stat:
    path: $HOME/.config/helm/repositories.yaml
  register: helm_check

- name: Download get-helm-3
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    dest: ~/get-helm-3.sh
    mode: '0700'
  when: not helm_check.stat.exists

- name: install helm if not exist
  ansible.builtin.command: >-
    ~/get-helm-3.sh
  when: not helm_check.stat.exists
  changed_when: true

- name: Install metallb
  ansible.builtin.shell: |
    kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.12/config/manifests/metallb-native.yaml
  when: k3s_metallb

- name: Configure metallb range
  ansible.builtin.shell: |
    cat <<EOF | kubectl apply -f -
    apiVersion: metallb.io/v1beta1
    kind: IPAddressPool
    metadata:
      name: first-pool
      namespace: metallb-system
    spec:
        addresses:
          - {{ k3s_metallb_range }}
  when: k3s_metallb

- name: Configure Traefik devmode
  when: k3s_traefik_dev
  block:
    - name: Copy traefik-custom-conf.yml to tmp
      ansible.builtin.copy:
        src: 'traefik-custom-conf.yml'
        dest: '/tmp'
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: '0644'
      become: true

    - name: Apply Traefik config
      ansible.builtin.command: >-
        kubectl apply -f /tmp/traefik-custom-conf.yml

- name: Cert
  when: k3s_mkcert
  block:
    - name: install nfs-common on the servers
      ansible.builtin.apt:
        name: "{{ item }}"
        state: present
        update_cache: true
      loop:
        - mkcert
        - libnss3-tools
      become: true

    - name: test if rootca is present
      ansible.builtin.stat:
        path: ~/.local/share/mkcert/rootCA.pem
      register: _mkcert_caroot

    - name: Generate root ca
      ansible.builtin.command: mkcert -install
      when: not _mkcert_caroot.stat.exists

    - name: test if key is present
      ansible.builtin.stat:
        path: "~/.local/share/mkcert/_wildcard{{ k3s_domain }}-key.pem"
      register: _mkcert_key

    - name: Generate root ca
      ansible.builtin.shell: mkcert "*{{ k3s_domain }}"
      args:
        chdir: ~/.local/share/mkcert/
      when: not _mkcert_key.stat.exists
